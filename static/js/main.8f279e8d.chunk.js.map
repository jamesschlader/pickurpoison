{"version":3,"sources":["components.js/ClickCard.js","components.js/HalfGrid.js","components.js/Card.js","components.js/GOModal.js","App.js","serviceWorker.js","index.js"],"names":["ClickCard","_this","this","react_default","a","createElement","className","onClick","event","props","master","id","src","width","height","alt","name","Component","HalfGrid","children","Card","operator","game","highScore","GOModal","style","backgroundColor","total","e","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffleDeck","array","key","preventDefault","clicked","find","item","setState","gameOver","state","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","panels","handleGameOver","object","setPanels","forEach","push","image","_this2","newList","map","Fragment","ClickCard_ClickCard","gameOverModal","GOModal_GOModal","assign","Card_Card","HalfGrid_HalfGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f279e8d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class ClickCard extends Component {\r\n  render() {\r\n    let styles = `uk-card uk-card-hover uk-card-body uk-margin-right uk-margin-left uk-margin-bottom uk-animation-scale-up `\r\n    return (\r\n      \r\n        <div className={styles}  onClick={(event) => this.props.onClick(this.props.master, event, this.props.id)}>\r\n            <img src={this.props.src} width=\"100px\" height=\"100px\" alt={this.props.name} className=\"uk-img \"></img>\r\n         \r\n        </div>\r\n   \r\n    )\r\n  }\r\n}\r\n","\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class HalfGrid extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"uk-child-width-1-5@s uk-grid-match uk-grid uk-grid-large uk-grid \">\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Card extends Component {\r\n  render() {\r\n    let styles = `uk-card uk-card-hover uk-card-body uk-margin-right uk-margin-left uk-margin-bottom `;\r\n    return (\r\n      <div className={styles}>\r\n        <h3 className=\"uk-card-title\">\r\n          You've clicked {this.props.operator} poisons without dying!\r\n        </h3>\r\n        <h5>\r\n          High Score: {this.props.game === 1 ? null : this.props.highScore}\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class GOModal extends Component {\r\n  render() {\r\n    const styles = {\r\n      backgroundColor: \"red\"\r\n    };\r\n    return (\r\n      <div\r\n        className=\"uk-padding-large uk-text-center uk-background-muted \"\r\n        style={styles}\r\n      >\r\n        <h1>GAME OVER!</h1>\r\n        <h3>You finished the game with {this.props.total} poisons picked. </h3>\r\n        <h3>\r\n          The current high score is{\" \"}\r\n          {this.props.total > this.props.highScore\r\n            ? this.props.total\r\n            : this.props.highScore}\r\n          .{\" \"}\r\n        </h3>\r\n\r\n        <button\r\n          className=\"uk-button uk-button-default\"\r\n          onClick={e => this.props.onClick(this.props)}\r\n        >\r\n          Start Over\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport ClickCard from \"./components.js/ClickCard\";\nimport HalfGrid from \"./components.js/HalfGrid\";\nimport Card from \"./components.js/Card\";\nimport GOModal from \"./components.js/GOModal\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: 0,\n      game: 1,\n      highScore: null,\n      gameOver: false,\n      panels: [\n        {\n          id: 0,\n          name: \"poison1\",\n          clicked: false,\n          image: \"images/poison1.svg\"\n        },\n        {\n          id: 1,\n          name: \"poison2\",\n          clicked: false,\n          image: \"images/poison2.svg\"\n        },\n        {\n          id: 2,\n          name: \"poison3\",\n          clicked: false,\n          image: \"images/poison3.svg\"\n        },\n        {\n          id: 3,\n          name: \"poison4\",\n          clicked: false,\n          image: \"images/poison4.svg\"\n        },\n        {\n          id: 4,\n          name: \"poison5\",\n          clicked: false,\n          image: \"images/poison5.svg\"\n        },\n        {\n          id: 5,\n          name: \"poison6\",\n          clicked: false,\n          image: \"images/poison6.svg\"\n        },\n        {\n          id: 6,\n          name: \"poison7\",\n          clicked: false,\n          image: \"images/poison7.svg\"\n        },\n        {\n          id: 7,\n          name: \"poison8\",\n          clicked: false,\n          image: \"images/poison8.svg\"\n        },\n        {\n          id: 8,\n          name: \"poison9\",\n          clicked: false,\n          image: \"images/poison9.svg\"\n        },\n        {\n          id: 9,\n          name: \"poison10\",\n          clicked: false,\n          image: \"images/poison10.svg\"\n        },\n        {\n          id: 10,\n          name: \"poison11\",\n          clicked: false,\n          image: \"images/poison11.svg\"\n        },\n        {\n          id: 11,\n          name: \"poison12\",\n          clicked: false,\n          image: \"images/poison12.svg\"\n        }\n      ]\n    };\n  }\n\n  shuffleDeck = (array, event, key) => {\n    event.preventDefault();\n\n    const clicked = array.find(item => item.id === key);\n    if (!clicked.clicked) {\n      clicked.clicked = !clicked.clicked;\n\n      this.setState({\n        total: this.state.total + 1,\n        highScore:\n          this.state.total + 1 > this.state.highScore\n            ? this.state.total + 1\n            : this.state.highScore\n      });\n\n      var currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n      this.setState({\n        panels: array\n      });\n    } else {\n      this.setState({\n        gameOver: !this.state.gameOver\n      });\n    }\n  };\n\n  handleGameOver = object => {\n    const setPanels = [];\n    object.panels.forEach(item => {\n      item.clicked = false;\n      setPanels.push(item);\n    });\n\n    this.setState({\n      highScore:\n        object.total > object.highScore ? object.total : object.highScore,\n      total: 0,\n      game: this.state.game + 1,\n      gameOver: false,\n      panels: setPanels\n    });\n  };\n\n  render() {\n    const newList = this.state.panels.map(item => (\n      <React.Fragment>\n        <ClickCard\n          key={item.id}\n          master={this.state.panels}\n          clicked={item.clicked}\n          id={item.id}\n          name={item.name}\n          onClick={this.shuffleDeck}\n          src={item.image}\n        />\n      </React.Fragment>\n    ));\n\n    const gameOverModal = (\n      <React.Fragment>\n        <GOModal {...this.state} onClick={this.handleGameOver} />\n      </React.Fragment>\n    );\n\n    return (\n      <div className=\"uk-container\">\n        <div className=\"uk-section uk-section-secondary uk-light\">\n          <h1 className=\" uk-text-bold uk-text-center uk-text-4.0rem\">\n            Pick Your Poison\n          </h1>\n          <h3 className=\"uk-text-center\">\n            But don't pick the same one twice or{\" \"}\n            <span className=\" uk-text-uppercase uk-text-danger\">\n              you're dead!\n            </span>{\" \"}\n          </h3>\n        </div>\n\n        <Card\n          operator={this.state.total}\n          game={this.state.game}\n          highScore={this.state.highScore}\n        />\n\n        {!this.state.gameOver ? (\n          <HalfGrid>{newList}</HalfGrid>\n        ) : (\n          <React.Fragment>{gameOverModal}</React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}