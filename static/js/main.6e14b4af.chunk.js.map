{"version":3,"sources":["components.js/ClickCard.js","components.js/HalfGrid.js","components.js/Card.js","components.js/GOModal.js","App.js","serviceWorker.js","index.js"],"names":["ClickCard","_this","this","react_default","a","createElement","className","onClick","event","props","master","id","src","width","height","alt","name","Component","HalfGrid","children","Card","operator","GOModal","style","backgroundColor","total","highScore","e","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffleDeck","array","key","preventDefault","console","log","state","panels","clicked","find","item","setState","gameOver","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","handleGameOver","object","assertThisInitialized","setPanels","forEach","push","image","_this2","newList","map","Fragment","ClickCard_ClickCard","gameOverModal","GOModal_GOModal","assign","Card_Card","HalfGrid_HalfGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e14b4af.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class ClickCard extends Component {\r\n  render() {\r\n    let styles = `uk-card uk-card-hover uk-card-body uk-margin-right uk-margin-left uk-margin-bottom uk-animation-scale-up `\r\n    return (\r\n      \r\n        <div className={styles}  onClick={(event) => this.props.onClick(this.props.master, event, this.props.id)}>\r\n            <img src={this.props.src} width=\"100px\" height=\"100px\" alt={this.props.name} className=\"uk-img \"></img>\r\n         \r\n        </div>\r\n   \r\n    )\r\n  }\r\n}\r\n","\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class HalfGrid extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"uk-child-width-1-5@s uk-grid-match uk-grid uk-grid-large uk-grid \">\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Card extends Component {\r\n  render() {\r\n    let styles = `uk-card uk-card-hover uk-card-body uk-margin-right uk-margin-left uk-margin-bottom `\r\n    return (\r\n      \r\n        <div className={styles} >\r\n            <h3 className=\"uk-card-title\" >You've clicked {this.props.operator} poisons without dying!</h3>\r\n            <h5>High Score: {this.props.children}</h5>\r\n        </div>\r\n   \r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class GOModal extends Component {\r\n  render() {\r\n   const styles = {\r\n     backgroundColor: \"red\"\r\n   }\r\n    return (\r\n     \r\n\r\n    <div className=\"uk-padding-large uk-text-center uk-background-muted \" style={styles}>\r\n        <h1>GAME OVER!</h1>\r\n          <h3>You finished the game with {this.props.total} poisons picked. </h3>\r\n          <h3>The current high score is {this.props.highScore}. </h3>\r\n   \r\n\r\n    <button className=\"uk-button uk-button-default\" onClick={e => this.props.onClick(this.props)}>Start Over</button> \r\n      \r\n    </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport ClickCard from \"./components.js/ClickCard\";\nimport HalfGrid from './components.js/HalfGrid';\nimport Card from \"./components.js/Card\";\nimport GOModal from './components.js/GOModal';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: 0,\n      highScore: 0,\n      gameOver: false,\n      panels: [\n        {\n          id: 0,\n          name: \"poison1\",\n          clicked: false,\n          image: \"/images/poison1.jpg\"\n        },\n        {\n          id: 1,\n          name: \"poison2\",\n          clicked: false,\n          image: \"/images/poison2.jpg\"\n        },\n        {\n          id: 2,\n          name: \"poison3\",\n          clicked: false,\n          image: \"/images/poison3.jpg\"\n        },\n        {\n          id: 3,\n          name: \"poison4\",\n          clicked: false,\n          image: \"/images/poison4.jpg\"\n        },\n        {\n          id: 4,\n          name: \"poison5\",\n          clicked: false,\n          image: \"/images/poison5.jpg\"\n        },\n        {\n          id: 5,\n          name: \"poison6\",\n          clicked: false,\n          image: \"/images/poison6.jpg\"\n        },\n        {\n          id: 6,\n          name: \"poison7\",\n          clicked: false,\n          image: \"/images/poison7.jpg\"\n        },\n        {\n          id: 7,\n          name: \"poison8\",\n          clicked: false,\n          image: \"/images/poison8.jpg\"\n        },\n        {\n          id: 8,\n          name: \"poison9\",\n          clicked: false,\n          image: \"/images/poison9.jpg\"\n        },\n        {\n          id: 9,\n          name: \"poison10\",\n          clicked: false,\n          image: \"/images/poison10.jpg\"\n        },\n        {\n          id: 10,\n          name: \"poison11\",\n          clicked: false,\n          image: \"/images/poison11.jpg\"\n        },\n        {\n          id: 11,\n          name: \"poison12\",\n          clicked: false,\n          image: \"/images/poison12.jpg\"\n        },\n      ]\n    }\n  }\n\n  shuffleDeck = (array, event, key) => {\n    event.preventDefault();\n    console.log(key);\n    console.log(`here's the array inside shuffleDeck: `, array);\n    console.log(`here's the this.state.list inside shuffleDeck: `, this.state.panels);\n    console.log(`here's the clicked item inside shuffleDeck: `, this.state.panels[key]);\n   \n    const clicked = array.find(item => item.id === key);\n    if (!clicked.clicked) {\n      clicked.clicked = !clicked.clicked;\n   \n      this.setState({\n          total: this.state.total + 1,\n          highScore: this.state.total > this.state.highScore ? this.state.total : this.state.highScore\n      });\n     \n      var currentIndex = array.length, temporaryValue, randomIndex;\n  \n       // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n       currentIndex -= 1;\n  \n       // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n       array[randomIndex] = temporaryValue;\n      }\n      this.setState({\n          panels: array\n        })\n    } else {\n      this.setState({\n        gameOver: !this.state.gameOver\n      })\n    }\n   }\n\n   handleGameOver = (object) => {\n   \n    console.log(`this is `, this)\n    console.log(`this.state.panel is `, object)\n    const setPanels = [];\n    object.panels.forEach(item => {\n      item.clicked = false;\n      setPanels.push(item)\n    });\n    console.log(`here are the setPanels: `, setPanels)\n    this.setState({\n      highScore: object.total > object.highScore ? object.total : object.highScore,\n      total: 0,\n      gameOver: false,\n      panels: setPanels\n    })\n    console.log(`after update, here's the state `,this.state)\n   }\n\n  render() {\n    const newList = this.state.panels.map(item => <React.Fragment><ClickCard key={item.id}  master={this.state.panels} clicked={item.clicked} id={item.id} name={item.name} onClick={this.shuffleDeck} src={item.image}>         \n    </ClickCard></React.Fragment>);\n\n    const gameOverModal = <React.Fragment><GOModal {...this.state} onClick={this.handleGameOver}/></React.Fragment>\n\n    return (\n     <div className=\"uk-container\">\n       <div className=\"uk-section uk-section-secondary uk-light\">\n       <h1 className=\" uk-text-bold uk-text-center uk-text-4.0rem\">Pick Your Poison</h1>\n       <h3 className=\"uk-text-center\">But don't pick the same one twice or <span className=\" uk-text-uppercase uk-text-danger\">you're dead!</span> </h3>\n       </div>\n\n       <Card operator={this.state.total}>{this.state.highScore}</Card>\n\n   {!this.state.gameOver ? <HalfGrid>{newList}</HalfGrid> : <React.Fragment>{gameOverModal}</React.Fragment>\n     \n   }\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}